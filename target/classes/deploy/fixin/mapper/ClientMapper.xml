<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="deploy.fixin.mapper.ClientMapper">
	<!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型 
		resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 -->
	<!-- 根据id查询得到一个user对象 -->
	<select id="getClientsByClientID" parameterType="String"
		resultType="Client">
		select * from fix_client_tbl where client_id=#{client_id}
	</select>
	
	<delete id="deleteClient" parameterType="String">
	   delete from fix_client_tbl where client_id=#{client_id}
	</delete>

	<!-- 创建用户(Create) -->
	<insert id="addClient" parameterType="Client">
		insert into fix_client_tbl(
		client_id,
		sender_comp_id,
		sender_sub_comp_id,
		sender_location_id,
		obf_comp_id,
		obf_sub_comp_id,
		obf_location_id,
		target_comp_id,
		target_sub_comp_id,
		target_location_id,
		dt_comp_id,
		dt_sub_comp_id,
		dt_location_id,
		name,
		status,
		send_pend_new,
		unsol_new,
		unsol_modify,
		unsol_cancel,
		client_sub_id,
		target_client_id,
		last_update,
		fix_appl_version
		)
		values(#{client_id},#{sender_comp_id},#{sender_sub_comp_id},#{sender_location_id},#{obf_comp_id},
		#{obf_sub_comp_id},#{obf_location_id},#{target_comp_id},#{target_sub_comp_id},#{target_location_id},#{dt_comp_id},
		#{dt_sub_comp_id},#{dt_location_id},#{name},#{status},#{send_pend_new},#{unsol_new},#{unsol_modify},#{unsol_cancel},
		#{client_sub_id},#{target_client_id},#{last_update},#{fix_appl_version})
	</insert>



</mapper>